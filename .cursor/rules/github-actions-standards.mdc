---
alwaysApply: true
---
# GitHub Actions Standards

## Workflow Naming

Use emoji icons for better visibility:

```yaml
name: 🐳 Docker Build Workflow
```

Common icons:
- 🐳 Docker builds
- 🔧 Build/compile
- 🧪 Testing
- 📦 Package/release
- 🚀 Deployment

## Step Icons

Add emoji to step names for readability:

- 📥 Checkout code
- 🔧 Setup/configure tools
- 🔐 Authentication
- 🐳 Docker operations
- 🧪 Run tests
- 🚀 Deploy

## Per-Image Workflows

Each image should have its own workflow file:
- Naming: `.github/workflows/<image-name>.yml`
- Trigger on relevant file changes only
- Use reusable workflow: `.github/workflows/docker-build.yml`
- Images are **only pushed to GHCR from master branch**
- Dev and PR branches build only (no push)

### Workflow Structure

Standard pattern for image workflows:

```yaml
name: 🐳 <Image Name> Docker Image

env:
  DEFAULT_VERSION: v1.0.0

on:
  push:
    branches: [master, dev]
    paths:
      - '.github/workflows/<image-name>.yml'
      - '.github/workflows/docker-build.yml'
      - 'images/<image-name>/**'
  pull_request:
    branches: [master, dev]
    paths:
      - '.github/workflows/<image-name>.yml'
      - '.github/workflows/docker-build.yml'
      - 'images/<image-name>/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., v1.0.0)'
        required: true
        type: string
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean
      custom_tags:
        description: 'Additional custom tags (comma-separated, optional)'
        required: false
        default: ''
        type: string

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 🏷️ Resolve version
        id: version
        run: |
          VERSION="${{ github.event.inputs.version || env.DEFAULT_VERSION }}"
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Using version: ${VERSION}"

  build:
    needs: prepare
    uses: ./.github/workflows/docker-build.yml
    permissions:
      contents: read
      packages: write
    with:
      image_name: jethome-dev-<image-name>
      context_path: images/<image-name>
      version_tag: <prefix>-${{ needs.prepare.outputs.version }}
      force_rebuild: ${{ github.event.inputs.force_rebuild || false }}
      custom_tags: ${{ github.event.inputs.custom_tags || '' }}
      build_args: |
        VERSION=${{ needs.prepare.outputs.version }}
```

### Version Handling

- Define default versions in `env` at workflow level (single source of truth)
- Use `prepare` job to resolve version (inputs or env default)
- Pass resolved version via job outputs to build job
- `env` context available in job steps, outputs available in `with:`
- Easy to override manually via GitHub UI (workflow_dispatch inputs)

### Push Behavior by Branch

| Branch/Event | Build | Push to GHCR | Tags Generated |
|--------------|-------|--------------|----------------|
| Master | Yes | Yes | `latest`, `stable`, `VERSION`, `sha-SHA` |
| Dev | Yes | No | None |
| Pull Request | Yes | No | None |

**Rationale:**
- Keeps GHCR clean with only released images
- Faster CI on dev branches (build-only validation)
- Clear release strategy: master = production/stable
- Dev branch for testing before release

## Local Testing

Test workflows locally using `act`:
- Configuration in `.actrc`
- Test specific job: `act -j build`
- Use `.secrets` file for local secrets (gitignored)
