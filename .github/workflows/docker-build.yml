# Reusable Docker Build Workflow
name: üîß Reusable Docker Build

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Docker image name (e.g., jethome-dev-platformio)'
        required: true
        type: string
      context_path:
        description: 'Build context path (e.g., images/platformio)'
        required: true
        type: string
      version_tag:
        description: 'Primary version tag (e.g., idf-v5.4.1, pio-6.1.15)'
        required: true
        type: string
      force_rebuild:
        description: 'Force rebuild without cache'
        required: false
        default: false
        type: boolean
      custom_tags:
        description: 'Additional custom tags (comma-separated, optional)'
        required: false
        default: ''
        type: string
      build_args:
        description: 'Build arguments (newline-separated, e.g., "ARG1=value1\nARG2=value2")'
        required: false
        default: ''
        type: string

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4
        
      - name: üîß Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: üîê Log in to GitHub Container Registry
        if: github.event_name != 'pull_request' && github.ref_name == 'master'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: üè∑Ô∏è Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}
          
      - name: üéØ Generate tags for master branch
        id: tags
        run: |
          TAGS=""
          
          # Determine branch (for manual/scheduled triggers)
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            BRANCH="${{ github.ref_name }}"
          else
            BRANCH="${{ github.ref }}"
          fi
          
          # Only generate tags for master branch (images only pushed from master)
          if [[ "$BRANCH" == "refs/heads/master" ]] || [[ "$BRANCH" == "master" ]]; then
            SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
            VERSION=$(date +%Y.%m.%d)
            
            TAGS="${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:latest"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:stable"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:${{ inputs.version_tag }}"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:$VERSION"
            TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:sha-$SHA_SHORT"
            
            # Add custom tags if provided
            if [[ "${{ inputs.custom_tags }}" != "" ]]; then
              IFS=',' read -ra CUSTOM_TAGS <<< "${{ inputs.custom_tags }}"
              for tag in "${CUSTOM_TAGS[@]}"; do
                tag=$(echo "$tag" | xargs)  # trim whitespace
                TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:$tag"
              done
            fi
            
            # Add rebuild tag for scheduled/manual rebuilds
            if [[ "${{ github.event_name }}" == "schedule" ]]; then
              TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:monthly-$(date +%Y%m%d)"
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
              TAGS="$TAGS,${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ inputs.image_name }}:manual-$(date +%Y%m%d-%H%M%S)"
            fi
          fi
          
          echo "TAGS=$TAGS" >> $GITHUB_OUTPUT
          
      - name: üíæ Determine cache strategy
        id: cache
        run: |
          if [[ "${{ inputs.force_rebuild }}" == "true" ]]; then
            echo "CACHE_FROM=" >> $GITHUB_OUTPUT
            echo "CACHE_TO=" >> $GITHUB_OUTPUT
            echo "NO_CACHE=true" >> $GITHUB_OUTPUT
          else
            echo "CACHE_FROM=type=gha,scope=${{ inputs.image_name }}" >> $GITHUB_OUTPUT
            echo "CACHE_TO=type=gha,mode=max,scope=${{ inputs.image_name }}" >> $GITHUB_OUTPUT
            echo "NO_CACHE=false" >> $GITHUB_OUTPUT
          fi
          
      - name: üê≥ Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context_path }}
          push: ${{ github.event_name != 'pull_request' && github.ref_name == 'master' }}
          tags: ${{ steps.tags.outputs.TAGS }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ steps.cache.outputs.CACHE_FROM }}
          cache-to: ${{ steps.cache.outputs.CACHE_TO }}
          no-cache: ${{ steps.cache.outputs.NO_CACHE }}
          platforms: linux/amd64
          build-args: ${{ inputs.build_args }}

